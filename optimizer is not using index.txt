We have a slow query, after using tracefile to check the execution plan and statistics, 
We found the optimizer is not using the index on the object_name.
this is the example:
SQL>create index object_name on objects(object_name);

SQL> set autotrace traceonly;
SQL> select * from objects
     where
     upper(object_name)='EMP'

8 rows selected.


Execution Plan
----------------------------------------------------------
Plan hash value: 80137940

-----------------------------------------------------------------------------
| Id  | Operation	  | Name    | Rows  | Bytes | Cost (%CPU)| Time     |
-----------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |	    |  3588 |	402K|  1651   (1)| 00:00:01 |
|*  1 |  TABLE ACCESS FULL| OBJECTS |  3588 |	402K|  1651   (1)| 00:00:01 |
-----------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter(UPPER("OBJECT_NAME")='EMP')


Statistics
----------------------------------------------------------
	  1  recursive calls
	  0  db block gets
       6045  consistent gets
       6041  physical reads
	  0  redo size
       2338  bytes sent via SQL*Net to client
	551  bytes received via SQL*Net from client
	  2  SQL*Net roundtrips to/from client
	  0  sorts (memory)
	  0  sorts (disk)
	  8  rows processed

The optimizer does not use the index on object_name in this query,
because we use the UPPER function. To solve this issue and let the optimizer 
use the index we need to create function based index:

SQL> create index uppercase_idx on objects(upper(object_name));

Index created.

SQL> select * from objects
     where
     upper(object_name)='EMP'


8 rows selected.


Execution Plan
----------------------------------------------------------
Plan hash value: 3796276984

--------------------------------------------------------------------------------
-------------------

| Id  | Operation			    | Name	  | Rows  | Bytes | Cost
 (%CPU)| Time	  |

--------------------------------------------------------------------------------
-------------------

|   0 | SELECT STATEMENT		    |		  |	7 |   805 |
8   (0)| 00:00:01 |

|   1 |  TABLE ACCESS BY INDEX ROWID BATCHED| OBJECTS	  |	7 |   805 |
8   (0)| 00:00:01 |

|*  2 |   INDEX RANGE SCAN		    | OBJECT_NAME |	7 |	  |
3   (0)| 00:00:01 |

--------------------------------------------------------------------------------
-------------------


Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access("OBJECT_NAME"='EMP')


Statistics
----------------------------------------------------------
	151  recursive calls
	  0  db block gets
	299  consistent gets
	 32  physical reads
	  0  redo size
       2544  bytes sent via SQL*Net to client
	551  bytes received via SQL*Net from client
	  2  SQL*Net roundtrips to/from client
	 37  sorts (memory)
	  0  sorts (disk)
	  8  rows processed
After creating the function based index, the optimizer used the avilable index.
